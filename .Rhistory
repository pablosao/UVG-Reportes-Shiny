install.packages(c("ECharts2Shiny", "RPostgres", "RPostgreSQL", "shinydashboard"))
db <- 'preportes'
host_db <- 'covid-19.westus2.cloudapp.azure.com'
db_port <- '5432'
db_user <- 'reportes'
db_password <- 'SDex2020'
con <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password=db_password)
library(shiny)
library(shinydashboard)
library(RPostgreSQL)
library(DT)
library(ECharts2Shiny)
con <- dbConnect(RPostgres::Postgres(), dbname = db, host=host_db, port=db_port, user=db_user, password=db_password)
casosPorMunicipio <- dbGetQuery(con, "select b.descripcion as pais,c.descripcion as municipio,a.caso_confirmado,count(a.codigo_solicitud) as cantidad_registrados from solicitud as a inner join pais as b on a.codigo_pais = b.codigo_pais inner join municipio as c on a.codigo_municipio = c.codigo_municipio group by b.descripcion,c.descripcion,a.caso_confirmado order by c.descripcion;")
cantDeSintomas <- dbGetQuery(con, "select b.descripcion ,count(a.codigo_sintoma) from sintomas_persona as a inner join tipo_sintoma as b on a.codigo_sintoma = b.codigo_sintoma group by b.descripcion;")
sexoVsCasos <- dbGetQuery(con, "select case sexo when 'F' then 'Femenino' when 'M' then 'Masculino' end as sexo,caso_confirmado,count(codigo_solicitud) from solicitud group by sexo,caso_confirmado order by sexo;")
ui <- dashboardPage(
title = "Reportes COVID-19",
dashboardHeader(title= "Reportes COVID-19 UVG"),
dashboardSidebar(
sidebarMenu(
menuItem("General", tabName = "general", icon = icon("chart-pie")),
menuItem("Casos", tabName = "cases", icon = icon("caret-right")),
menuItem("Afectados", tabName = "afected", icon = icon("caret-right")),
menuItem("Regiones", tabName = "regions", icon = icon("caret-right")),
menuItem("Sintomas Comunes", tabName = "symptoms", icon = icon("caret-right"))
)
),
dashboardBody(
tags$head(
tags$style(HTML('
.skin-blue .main-header .navbar{
background-color: #21822b;
}
.skin-blue .main-header .logo{
background-color: #21822b;
}
.skin-blue .sidebar-menu > li.active > a, .skin-blue .sidebar-menu > li:hover > a{
border-left-color: #21822b;
}
.skin-blue .left-side, .skin-blue .main-sidebar, .skin-blue .wrapper {
background-color: #3b3a3b;
}
'))
),
tabItems(
tabItem("general",
fluidPage(
h1("General"),
hr(),
h3("Casos por Municipio"),
box(
DT::dataTableOutput("cpm"),
width = 15
),
h3("Cantidad de Sintomas"),
box(
plotOutput('cantSinto'),
width = 10,
)
)
),
tabItem("cases",
fluidPage(
h1("Casos")
)
),
tabItem("afected",
fluidPage(
h1("Afectados")
)
),
tabItem("regions",
fluidPage(
h1("Regiones")
)
),
tabItem("symptoms",
fluidPage(
h1("Sintomas Comunes")
)
)
)
)
)
server <- function(input, output){
output$cpm = DT::renderDataTable({
casosPorMunicipio
})
output$cantSinto <- renderPlot({
barplot(
height = as.matrix.data.frame(cantDeSintomas),
main = "Maximum Temperatures in a Week",
xlab = "Cantidad de personas",
ylab = "Sintomas",
names.arg = c(cantDeSintomas[['descripcion']]),
col = "darkred",
horiz = TRUE)
})
}
shinyApp(ui, server)
getSexo_EstadoPrueba<-function(fecha_inicial,fecha_final){
# Descripcion:= retorna el query con la fecha en el filtro para retornar la cantidad
#               de los resultados de los casos vs sexo
# fecha_inicial:= type Date
# fecha_final:= type Date
# Ejemplo:= getSexo_EstadoPrueba('2020-04-01 00:00:00.00','2020-05-31 00:00:00.00')
query <- sprintf("
SELECT
sexo
,CASE WHEN positivo IS NULL
THEN 0
ELSE positivo
END AS Positivo
,CASE WHEN negativo IS NULL
THEN 0
ELSE negativo
END AS Negativo
FROM
crosstab(
$$SELECT
CASE sexo
WHEN 'F' THEN 'Femenino'
WHEN 'M' THEN 'Masculino'
END AS sexo
,CASE caso_confirmado
WHEN true THEN 'Positivo'
WHEN false THEN 'Negativo'
END AS caso_confirmado
,COUNT(codigo_solicitud) AS cantidad
FROM
solicitud
WHERE
fecha_solicitud BETWEEN '%s'::date AND '%s'::date
GROUP BY sexo,caso_confirmado
ORDER BY sexo
$$,
$$SELECT 'Positivo' AS descripcion
UNION ALL
SELECT 'Negativo' AS descripcion
$$
)
AS final_result( Sexo TEXT
,Positivo  bigint
,Negativo bigint
);
",fecha_inicial,fecha_final)
return(query)
}
